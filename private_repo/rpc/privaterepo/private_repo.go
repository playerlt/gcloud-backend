// Code generated by goctl. DO NOT EDIT!
// Source: private_repo.proto

package privaterepo

import (
	"context"

	"gcloud/private_repo/rpc/private_repo"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeletedUserFile           = private_repo.DeletedUserFile
	UserFile                  = private_repo.UserFile
	UserFileDeleteReply       = private_repo.UserFileDeleteReply
	UserFileDeleteRequest     = private_repo.UserFileDeleteRequest
	UserFileListReply         = private_repo.UserFileListReply
	UserFileListRequest       = private_repo.UserFileListRequest
	UserFileMoveReply         = private_repo.UserFileMoveReply
	UserFileMoveRequest       = private_repo.UserFileMoveRequest
	UserFileNameUpdateReply   = private_repo.UserFileNameUpdateReply
	UserFileNameUpdateRequest = private_repo.UserFileNameUpdateRequest
	UserFolderCreateReply     = private_repo.UserFolderCreateReply
	UserFolderCreateRequest   = private_repo.UserFolderCreateRequest
	UserRepositorySaveReply   = private_repo.UserRepositorySaveReply
	UserRepositorySaveRequest = private_repo.UserRepositorySaveRequest

	PrivateRepo interface {
		UserFileDelete(ctx context.Context, in *UserFileDeleteRequest, opts ...grpc.CallOption) (*UserFileDeleteReply, error)
		UserFileList(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*UserFileListReply, error)
		UserFileMove(ctx context.Context, in *UserFileMoveRequest, opts ...grpc.CallOption) (*UserFileMoveReply, error)
		UserFileNameUpdate(ctx context.Context, in *UserFileNameUpdateRequest, opts ...grpc.CallOption) (*UserFileNameUpdateReply, error)
		UserFolderCreate(ctx context.Context, in *UserFolderCreateRequest, opts ...grpc.CallOption) (*UserFolderCreateReply, error)
		UserRepositorySave(ctx context.Context, in *UserRepositorySaveRequest, opts ...grpc.CallOption) (*UserRepositorySaveReply, error)
	}

	defaultPrivateRepo struct {
		cli zrpc.Client
	}
)

func NewPrivateRepo(cli zrpc.Client) PrivateRepo {
	return &defaultPrivateRepo{
		cli: cli,
	}
}

func (m *defaultPrivateRepo) UserFileDelete(ctx context.Context, in *UserFileDeleteRequest, opts ...grpc.CallOption) (*UserFileDeleteReply, error) {
	client := private_repo.NewPrivateRepoClient(m.cli.Conn())
	return client.UserFileDelete(ctx, in, opts...)
}

func (m *defaultPrivateRepo) UserFileList(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*UserFileListReply, error) {
	client := private_repo.NewPrivateRepoClient(m.cli.Conn())
	return client.UserFileList(ctx, in, opts...)
}

func (m *defaultPrivateRepo) UserFileMove(ctx context.Context, in *UserFileMoveRequest, opts ...grpc.CallOption) (*UserFileMoveReply, error) {
	client := private_repo.NewPrivateRepoClient(m.cli.Conn())
	return client.UserFileMove(ctx, in, opts...)
}

func (m *defaultPrivateRepo) UserFileNameUpdate(ctx context.Context, in *UserFileNameUpdateRequest, opts ...grpc.CallOption) (*UserFileNameUpdateReply, error) {
	client := private_repo.NewPrivateRepoClient(m.cli.Conn())
	return client.UserFileNameUpdate(ctx, in, opts...)
}

func (m *defaultPrivateRepo) UserFolderCreate(ctx context.Context, in *UserFolderCreateRequest, opts ...grpc.CallOption) (*UserFolderCreateReply, error) {
	client := private_repo.NewPrivateRepoClient(m.cli.Conn())
	return client.UserFolderCreate(ctx, in, opts...)
}

func (m *defaultPrivateRepo) UserRepositorySave(ctx context.Context, in *UserRepositorySaveRequest, opts ...grpc.CallOption) (*UserRepositorySaveReply, error) {
	client := private_repo.NewPrivateRepoClient(m.cli.Conn())
	return client.UserRepositorySave(ctx, in, opts...)
}
