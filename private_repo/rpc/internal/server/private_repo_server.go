// Code generated by goctl. DO NOT EDIT!
// Source: private_repo.proto

package server

import (
	"context"

	"gcloud/private_repo/rpc/internal/logic"
	"gcloud/private_repo/rpc/internal/svc"
	"gcloud/private_repo/rpc/private_repo"
)

type PrivateRepoServer struct {
	svcCtx *svc.ServiceContext
	private_repo.UnimplementedPrivateRepoServer
}

func NewPrivateRepoServer(svcCtx *svc.ServiceContext) *PrivateRepoServer {
	return &PrivateRepoServer{
		svcCtx: svcCtx,
	}
}

func (s *PrivateRepoServer) UserFileDelete(ctx context.Context, in *private_repo.UserFileDeleteRequest) (*private_repo.UserFileDeleteReply, error) {
	l := logic.NewUserFileDeleteLogic(ctx, s.svcCtx)
	return l.UserFileDelete(in)
}

func (s *PrivateRepoServer) UserFileList(ctx context.Context, in *private_repo.UserFileListRequest) (*private_repo.UserFileListReply, error) {
	l := logic.NewUserFileListLogic(ctx, s.svcCtx)
	return l.UserFileList(in)
}

func (s *PrivateRepoServer) UserFileMove(ctx context.Context, in *private_repo.UserFileMoveRequest) (*private_repo.UserFileMoveReply, error) {
	l := logic.NewUserFileMoveLogic(ctx, s.svcCtx)
	return l.UserFileMove(in)
}

func (s *PrivateRepoServer) UserFileNameUpdate(ctx context.Context, in *private_repo.UserFileNameUpdateRequest) (*private_repo.UserFileNameUpdateReply, error) {
	l := logic.NewUserFileNameUpdateLogic(ctx, s.svcCtx)
	return l.UserFileNameUpdate(in)
}

func (s *PrivateRepoServer) UserFolderCreate(ctx context.Context, in *private_repo.UserFolderCreateRequest) (*private_repo.UserFolderCreateReply, error) {
	l := logic.NewUserFolderCreateLogic(ctx, s.svcCtx)
	return l.UserFolderCreate(in)
}

func (s *PrivateRepoServer) UserRepositorySave(ctx context.Context, in *private_repo.UserRepositorySaveRequest) (*private_repo.UserRepositorySaveReply, error) {
	l := logic.NewUserRepositorySaveLogic(ctx, s.svcCtx)
	return l.UserRepositorySave(in)
}
