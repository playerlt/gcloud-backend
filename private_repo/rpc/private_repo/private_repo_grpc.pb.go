// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: private_repo.proto

package private_repo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrivateRepoClient is the client API for PrivateRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateRepoClient interface {
	UserFileDelete(ctx context.Context, in *UserFileDeleteRequest, opts ...grpc.CallOption) (*UserFileDeleteReply, error)
	UserFileList(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*UserFileListReply, error)
	UserFileMove(ctx context.Context, in *UserFileMoveRequest, opts ...grpc.CallOption) (*UserFileMoveReply, error)
	UserFileNameUpdate(ctx context.Context, in *UserFileNameUpdateRequest, opts ...grpc.CallOption) (*UserFileNameUpdateReply, error)
	UserFolderCreate(ctx context.Context, in *UserFolderCreateRequest, opts ...grpc.CallOption) (*UserFolderCreateReply, error)
	UserRepositorySave(ctx context.Context, in *UserRepositorySaveRequest, opts ...grpc.CallOption) (*UserRepositorySaveReply, error)
}

type privateRepoClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateRepoClient(cc grpc.ClientConnInterface) PrivateRepoClient {
	return &privateRepoClient{cc}
}

func (c *privateRepoClient) UserFileDelete(ctx context.Context, in *UserFileDeleteRequest, opts ...grpc.CallOption) (*UserFileDeleteReply, error) {
	out := new(UserFileDeleteReply)
	err := c.cc.Invoke(ctx, "/private_repo.PrivateRepo/UserFileDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateRepoClient) UserFileList(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*UserFileListReply, error) {
	out := new(UserFileListReply)
	err := c.cc.Invoke(ctx, "/private_repo.PrivateRepo/UserFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateRepoClient) UserFileMove(ctx context.Context, in *UserFileMoveRequest, opts ...grpc.CallOption) (*UserFileMoveReply, error) {
	out := new(UserFileMoveReply)
	err := c.cc.Invoke(ctx, "/private_repo.PrivateRepo/UserFileMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateRepoClient) UserFileNameUpdate(ctx context.Context, in *UserFileNameUpdateRequest, opts ...grpc.CallOption) (*UserFileNameUpdateReply, error) {
	out := new(UserFileNameUpdateReply)
	err := c.cc.Invoke(ctx, "/private_repo.PrivateRepo/UserFileNameUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateRepoClient) UserFolderCreate(ctx context.Context, in *UserFolderCreateRequest, opts ...grpc.CallOption) (*UserFolderCreateReply, error) {
	out := new(UserFolderCreateReply)
	err := c.cc.Invoke(ctx, "/private_repo.PrivateRepo/UserFolderCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateRepoClient) UserRepositorySave(ctx context.Context, in *UserRepositorySaveRequest, opts ...grpc.CallOption) (*UserRepositorySaveReply, error) {
	out := new(UserRepositorySaveReply)
	err := c.cc.Invoke(ctx, "/private_repo.PrivateRepo/UserRepositorySave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateRepoServer is the server API for PrivateRepo service.
// All implementations must embed UnimplementedPrivateRepoServer
// for forward compatibility
type PrivateRepoServer interface {
	UserFileDelete(context.Context, *UserFileDeleteRequest) (*UserFileDeleteReply, error)
	UserFileList(context.Context, *UserFileListRequest) (*UserFileListReply, error)
	UserFileMove(context.Context, *UserFileMoveRequest) (*UserFileMoveReply, error)
	UserFileNameUpdate(context.Context, *UserFileNameUpdateRequest) (*UserFileNameUpdateReply, error)
	UserFolderCreate(context.Context, *UserFolderCreateRequest) (*UserFolderCreateReply, error)
	UserRepositorySave(context.Context, *UserRepositorySaveRequest) (*UserRepositorySaveReply, error)
	mustEmbedUnimplementedPrivateRepoServer()
}

// UnimplementedPrivateRepoServer must be embedded to have forward compatible implementations.
type UnimplementedPrivateRepoServer struct {
}

func (UnimplementedPrivateRepoServer) UserFileDelete(context.Context, *UserFileDeleteRequest) (*UserFileDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFileDelete not implemented")
}
func (UnimplementedPrivateRepoServer) UserFileList(context.Context, *UserFileListRequest) (*UserFileListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFileList not implemented")
}
func (UnimplementedPrivateRepoServer) UserFileMove(context.Context, *UserFileMoveRequest) (*UserFileMoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFileMove not implemented")
}
func (UnimplementedPrivateRepoServer) UserFileNameUpdate(context.Context, *UserFileNameUpdateRequest) (*UserFileNameUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFileNameUpdate not implemented")
}
func (UnimplementedPrivateRepoServer) UserFolderCreate(context.Context, *UserFolderCreateRequest) (*UserFolderCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFolderCreate not implemented")
}
func (UnimplementedPrivateRepoServer) UserRepositorySave(context.Context, *UserRepositorySaveRequest) (*UserRepositorySaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRepositorySave not implemented")
}
func (UnimplementedPrivateRepoServer) mustEmbedUnimplementedPrivateRepoServer() {}

// UnsafePrivateRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateRepoServer will
// result in compilation errors.
type UnsafePrivateRepoServer interface {
	mustEmbedUnimplementedPrivateRepoServer()
}

func RegisterPrivateRepoServer(s grpc.ServiceRegistrar, srv PrivateRepoServer) {
	s.RegisterService(&PrivateRepo_ServiceDesc, srv)
}

func _PrivateRepo_UserFileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateRepoServer).UserFileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/private_repo.PrivateRepo/UserFileDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateRepoServer).UserFileDelete(ctx, req.(*UserFileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateRepo_UserFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateRepoServer).UserFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/private_repo.PrivateRepo/UserFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateRepoServer).UserFileList(ctx, req.(*UserFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateRepo_UserFileMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateRepoServer).UserFileMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/private_repo.PrivateRepo/UserFileMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateRepoServer).UserFileMove(ctx, req.(*UserFileMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateRepo_UserFileNameUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileNameUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateRepoServer).UserFileNameUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/private_repo.PrivateRepo/UserFileNameUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateRepoServer).UserFileNameUpdate(ctx, req.(*UserFileNameUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateRepo_UserFolderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFolderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateRepoServer).UserFolderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/private_repo.PrivateRepo/UserFolderCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateRepoServer).UserFolderCreate(ctx, req.(*UserFolderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateRepo_UserRepositorySave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRepositorySaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateRepoServer).UserRepositorySave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/private_repo.PrivateRepo/UserRepositorySave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateRepoServer).UserRepositorySave(ctx, req.(*UserRepositorySaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateRepo_ServiceDesc is the grpc.ServiceDesc for PrivateRepo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateRepo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "private_repo.PrivateRepo",
	HandlerType: (*PrivateRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserFileDelete",
			Handler:    _PrivateRepo_UserFileDelete_Handler,
		},
		{
			MethodName: "UserFileList",
			Handler:    _PrivateRepo_UserFileList_Handler,
		},
		{
			MethodName: "UserFileMove",
			Handler:    _PrivateRepo_UserFileMove_Handler,
		},
		{
			MethodName: "UserFileNameUpdate",
			Handler:    _PrivateRepo_UserFileNameUpdate_Handler,
		},
		{
			MethodName: "UserFolderCreate",
			Handler:    _PrivateRepo_UserFolderCreate_Handler,
		},
		{
			MethodName: "UserRepositorySave",
			Handler:    _PrivateRepo_UserRepositorySave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private_repo.proto",
}
