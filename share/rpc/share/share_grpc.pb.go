// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: share.proto

package share

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShareClient is the client API for Share service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShareClient interface {
	ShareBasicDetail(ctx context.Context, in *ShareBasicDetailRequest, opts ...grpc.CallOption) (*ShareBasicDetailReply, error)
	PopularShareList(ctx context.Context, in *PopularShareListRequest, opts ...grpc.CallOption) (*PopularShareListReply, error)
	ShareStatistics(ctx context.Context, in *ShareStatisticsRequest, opts ...grpc.CallOption) (*ShareStatisticsReply, error)
	ShareBasicCreate(ctx context.Context, in *ShareBasicCreateRequest, opts ...grpc.CallOption) (*ShareBasicCreateReply, error)
	ShareBasicSave(ctx context.Context, in *ShareBasicSaveRequest, opts ...grpc.CallOption) (*ShareBasicSaveReply, error)
	UserShareList(ctx context.Context, in *UserShareListRequest, opts ...grpc.CallOption) (*UserShareListReply, error)
}

type shareClient struct {
	cc grpc.ClientConnInterface
}

func NewShareClient(cc grpc.ClientConnInterface) ShareClient {
	return &shareClient{cc}
}

func (c *shareClient) ShareBasicDetail(ctx context.Context, in *ShareBasicDetailRequest, opts ...grpc.CallOption) (*ShareBasicDetailReply, error) {
	out := new(ShareBasicDetailReply)
	err := c.cc.Invoke(ctx, "/share.Share/ShareBasicDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) PopularShareList(ctx context.Context, in *PopularShareListRequest, opts ...grpc.CallOption) (*PopularShareListReply, error) {
	out := new(PopularShareListReply)
	err := c.cc.Invoke(ctx, "/share.Share/PopularShareList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ShareStatistics(ctx context.Context, in *ShareStatisticsRequest, opts ...grpc.CallOption) (*ShareStatisticsReply, error) {
	out := new(ShareStatisticsReply)
	err := c.cc.Invoke(ctx, "/share.Share/ShareStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ShareBasicCreate(ctx context.Context, in *ShareBasicCreateRequest, opts ...grpc.CallOption) (*ShareBasicCreateReply, error) {
	out := new(ShareBasicCreateReply)
	err := c.cc.Invoke(ctx, "/share.Share/ShareBasicCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ShareBasicSave(ctx context.Context, in *ShareBasicSaveRequest, opts ...grpc.CallOption) (*ShareBasicSaveReply, error) {
	out := new(ShareBasicSaveReply)
	err := c.cc.Invoke(ctx, "/share.Share/ShareBasicSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) UserShareList(ctx context.Context, in *UserShareListRequest, opts ...grpc.CallOption) (*UserShareListReply, error) {
	out := new(UserShareListReply)
	err := c.cc.Invoke(ctx, "/share.Share/UserShareList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareServer is the server API for Share service.
// All implementations must embed UnimplementedShareServer
// for forward compatibility
type ShareServer interface {
	ShareBasicDetail(context.Context, *ShareBasicDetailRequest) (*ShareBasicDetailReply, error)
	PopularShareList(context.Context, *PopularShareListRequest) (*PopularShareListReply, error)
	ShareStatistics(context.Context, *ShareStatisticsRequest) (*ShareStatisticsReply, error)
	ShareBasicCreate(context.Context, *ShareBasicCreateRequest) (*ShareBasicCreateReply, error)
	ShareBasicSave(context.Context, *ShareBasicSaveRequest) (*ShareBasicSaveReply, error)
	UserShareList(context.Context, *UserShareListRequest) (*UserShareListReply, error)
	mustEmbedUnimplementedShareServer()
}

// UnimplementedShareServer must be embedded to have forward compatible implementations.
type UnimplementedShareServer struct {
}

func (UnimplementedShareServer) ShareBasicDetail(context.Context, *ShareBasicDetailRequest) (*ShareBasicDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareBasicDetail not implemented")
}
func (UnimplementedShareServer) PopularShareList(context.Context, *PopularShareListRequest) (*PopularShareListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopularShareList not implemented")
}
func (UnimplementedShareServer) ShareStatistics(context.Context, *ShareStatisticsRequest) (*ShareStatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareStatistics not implemented")
}
func (UnimplementedShareServer) ShareBasicCreate(context.Context, *ShareBasicCreateRequest) (*ShareBasicCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareBasicCreate not implemented")
}
func (UnimplementedShareServer) ShareBasicSave(context.Context, *ShareBasicSaveRequest) (*ShareBasicSaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareBasicSave not implemented")
}
func (UnimplementedShareServer) UserShareList(context.Context, *UserShareListRequest) (*UserShareListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserShareList not implemented")
}
func (UnimplementedShareServer) mustEmbedUnimplementedShareServer() {}

// UnsafeShareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShareServer will
// result in compilation errors.
type UnsafeShareServer interface {
	mustEmbedUnimplementedShareServer()
}

func RegisterShareServer(s grpc.ServiceRegistrar, srv ShareServer) {
	s.RegisterService(&Share_ServiceDesc, srv)
}

func _Share_ShareBasicDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareBasicDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ShareBasicDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.Share/ShareBasicDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ShareBasicDetail(ctx, req.(*ShareBasicDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_PopularShareList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopularShareListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).PopularShareList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.Share/PopularShareList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).PopularShareList(ctx, req.(*PopularShareListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ShareStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ShareStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.Share/ShareStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ShareStatistics(ctx, req.(*ShareStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ShareBasicCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareBasicCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ShareBasicCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.Share/ShareBasicCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ShareBasicCreate(ctx, req.(*ShareBasicCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ShareBasicSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareBasicSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ShareBasicSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.Share/ShareBasicSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ShareBasicSave(ctx, req.(*ShareBasicSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_UserShareList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserShareListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).UserShareList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.Share/UserShareList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).UserShareList(ctx, req.(*UserShareListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Share_ServiceDesc is the grpc.ServiceDesc for Share service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Share_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "share.Share",
	HandlerType: (*ShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShareBasicDetail",
			Handler:    _Share_ShareBasicDetail_Handler,
		},
		{
			MethodName: "PopularShareList",
			Handler:    _Share_PopularShareList_Handler,
		},
		{
			MethodName: "ShareStatistics",
			Handler:    _Share_ShareStatistics_Handler,
		},
		{
			MethodName: "ShareBasicCreate",
			Handler:    _Share_ShareBasicCreate_Handler,
		},
		{
			MethodName: "ShareBasicSave",
			Handler:    _Share_ShareBasicSave_Handler,
		},
		{
			MethodName: "UserShareList",
			Handler:    _Share_UserShareList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "share.proto",
}
