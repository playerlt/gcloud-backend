// Code generated by goctl. DO NOT EDIT!
// Source: fileud.proto

package server

import (
	"context"

	"gcloud/fileud/rpc/fileud"
	"gcloud/fileud/rpc/internal/logic"
	"gcloud/fileud/rpc/internal/svc"
)

type FileudServer struct {
	svcCtx *svc.ServiceContext
	fileud.UnimplementedFileudServer
}

func NewFileudServer(svcCtx *svc.ServiceContext) *FileudServer {
	return &FileudServer{
		svcCtx: svcCtx,
	}
}

func (s *FileudServer) FileUpload(ctx context.Context, in *fileud.FileUploadRequest) (*fileud.FileUploadReply, error) {
	l := logic.NewFileUploadLogic(ctx, s.svcCtx)
	return l.FileUpload(in)
}

func (s *FileudServer) FileDownload(ctx context.Context, in *fileud.FileDownloadRequest) (*fileud.FileDownloadReply, error) {
	l := logic.NewFileDownloadLogic(ctx, s.svcCtx)
	return l.FileDownload(in)
}

func (s *FileudServer) FileUploadChunk(ctx context.Context, in *fileud.FileUploadChunkRequest) (*fileud.FileUploadChunkReply, error) {
	l := logic.NewFileUploadChunkLogic(ctx, s.svcCtx)
	return l.FileUploadChunk(in)
}

func (s *FileudServer) FileUploadChunkComplete(ctx context.Context, in *fileud.FileUploadChunkCompleteRequest) (*fileud.FileUploadChunkCompleteReply, error) {
	l := logic.NewFileUploadChunkCompleteLogic(ctx, s.svcCtx)
	return l.FileUploadChunkComplete(in)
}

func (s *FileudServer) FileUploadPrepare(ctx context.Context, in *fileud.FileUploadPrepareRequest) (*fileud.FileUploadPrepareReply, error) {
	l := logic.NewFileUploadPrepareLogic(ctx, s.svcCtx)
	return l.FileUploadPrepare(in)
}
