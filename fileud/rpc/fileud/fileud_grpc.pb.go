// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: fileud.proto

package fileud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileudClient is the client API for Fileud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileudClient interface {
	FileUpload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadReply, error)
	FileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadReply, error)
	FileUploadChunk(ctx context.Context, in *FileUploadChunkRequest, opts ...grpc.CallOption) (*FileUploadChunkReply, error)
	FileUploadChunkComplete(ctx context.Context, in *FileUploadChunkCompleteRequest, opts ...grpc.CallOption) (*FileUploadChunkCompleteReply, error)
	FileUploadPrepare(ctx context.Context, in *FileUploadPrepareRequest, opts ...grpc.CallOption) (*FileUploadPrepareReply, error)
}

type fileudClient struct {
	cc grpc.ClientConnInterface
}

func NewFileudClient(cc grpc.ClientConnInterface) FileudClient {
	return &fileudClient{cc}
}

func (c *fileudClient) FileUpload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadReply, error) {
	out := new(FileUploadReply)
	err := c.cc.Invoke(ctx, "/fileud.Fileud/FileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileudClient) FileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadReply, error) {
	out := new(FileDownloadReply)
	err := c.cc.Invoke(ctx, "/fileud.Fileud/FileDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileudClient) FileUploadChunk(ctx context.Context, in *FileUploadChunkRequest, opts ...grpc.CallOption) (*FileUploadChunkReply, error) {
	out := new(FileUploadChunkReply)
	err := c.cc.Invoke(ctx, "/fileud.Fileud/FileUploadChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileudClient) FileUploadChunkComplete(ctx context.Context, in *FileUploadChunkCompleteRequest, opts ...grpc.CallOption) (*FileUploadChunkCompleteReply, error) {
	out := new(FileUploadChunkCompleteReply)
	err := c.cc.Invoke(ctx, "/fileud.Fileud/FileUploadChunkComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileudClient) FileUploadPrepare(ctx context.Context, in *FileUploadPrepareRequest, opts ...grpc.CallOption) (*FileUploadPrepareReply, error) {
	out := new(FileUploadPrepareReply)
	err := c.cc.Invoke(ctx, "/fileud.Fileud/FileUploadPrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileudServer is the server API for Fileud service.
// All implementations must embed UnimplementedFileudServer
// for forward compatibility
type FileudServer interface {
	FileUpload(context.Context, *FileUploadRequest) (*FileUploadReply, error)
	FileDownload(context.Context, *FileDownloadRequest) (*FileDownloadReply, error)
	FileUploadChunk(context.Context, *FileUploadChunkRequest) (*FileUploadChunkReply, error)
	FileUploadChunkComplete(context.Context, *FileUploadChunkCompleteRequest) (*FileUploadChunkCompleteReply, error)
	FileUploadPrepare(context.Context, *FileUploadPrepareRequest) (*FileUploadPrepareReply, error)
	mustEmbedUnimplementedFileudServer()
}

// UnimplementedFileudServer must be embedded to have forward compatible implementations.
type UnimplementedFileudServer struct {
}

func (UnimplementedFileudServer) FileUpload(context.Context, *FileUploadRequest) (*FileUploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedFileudServer) FileDownload(context.Context, *FileDownloadRequest) (*FileDownloadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedFileudServer) FileUploadChunk(context.Context, *FileUploadChunkRequest) (*FileUploadChunkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploadChunk not implemented")
}
func (UnimplementedFileudServer) FileUploadChunkComplete(context.Context, *FileUploadChunkCompleteRequest) (*FileUploadChunkCompleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploadChunkComplete not implemented")
}
func (UnimplementedFileudServer) FileUploadPrepare(context.Context, *FileUploadPrepareRequest) (*FileUploadPrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploadPrepare not implemented")
}
func (UnimplementedFileudServer) mustEmbedUnimplementedFileudServer() {}

// UnsafeFileudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileudServer will
// result in compilation errors.
type UnsafeFileudServer interface {
	mustEmbedUnimplementedFileudServer()
}

func RegisterFileudServer(s grpc.ServiceRegistrar, srv FileudServer) {
	s.RegisterService(&Fileud_ServiceDesc, srv)
}

func _Fileud_FileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileudServer).FileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileud.Fileud/FileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileudServer).FileUpload(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileud_FileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileudServer).FileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileud.Fileud/FileDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileudServer).FileDownload(ctx, req.(*FileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileud_FileUploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileudServer).FileUploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileud.Fileud/FileUploadChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileudServer).FileUploadChunk(ctx, req.(*FileUploadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileud_FileUploadChunkComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadChunkCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileudServer).FileUploadChunkComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileud.Fileud/FileUploadChunkComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileudServer).FileUploadChunkComplete(ctx, req.(*FileUploadChunkCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileud_FileUploadPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileudServer).FileUploadPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileud.Fileud/FileUploadPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileudServer).FileUploadPrepare(ctx, req.(*FileUploadPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fileud_ServiceDesc is the grpc.ServiceDesc for Fileud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fileud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileud.Fileud",
	HandlerType: (*FileudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileUpload",
			Handler:    _Fileud_FileUpload_Handler,
		},
		{
			MethodName: "FileDownload",
			Handler:    _Fileud_FileDownload_Handler,
		},
		{
			MethodName: "FileUploadChunk",
			Handler:    _Fileud_FileUploadChunk_Handler,
		},
		{
			MethodName: "FileUploadChunkComplete",
			Handler:    _Fileud_FileUploadChunkComplete_Handler,
		},
		{
			MethodName: "FileUploadPrepare",
			Handler:    _Fileud_FileUploadPrepare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileud.proto",
}
