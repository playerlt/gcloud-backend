// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"gcloud/core/internal/handler/fileud"
	"gcloud/core/internal/handler/mail"
	"gcloud/core/internal/handler/posts"
	"gcloud/core/internal/handler/private_repo"
	"gcloud/core/internal/handler/public_repo"
	"gcloud/core/internal/handler/share"
	"gcloud/core/internal/handler/users"
	"net/http"

	"gcloud/core/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: users.UserLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/mail/code/send/register",
				Handler: mail.MailCodeSendRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: users.UserRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/share/basic/detail",
				Handler: share.ShareBasicDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/popular/share/list",
				Handler: share.PopularShareListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/share/statistics",
				Handler: share.ShareStatisticsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/register/count",
				Handler: users.RegisterCountHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/public/file/list",
				Handler: public_repo.PublicFileListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/posts/list",
				Handler: posts.PostsListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/posts/comment",
				Handler: posts.PostsCommentsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/posts/detail",
				Handler: posts.PostsDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/gongde/update",
				Handler: GongDeUpdateHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/public/file/save",
					Handler: public_repo.PublicFileSaveHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/ws/message",
					Handler: WebsocketMessageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/upload",
					Handler: fileud.FileUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/update",
					Handler: users.UserUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/repository/save",
					Handler: private_repo.UserRepositorySaveHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/file/list",
					Handler: private_repo.UserFileListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/file/name/update",
					Handler: private_repo.UserFileNameUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/folder/create",
					Handler: private_repo.UserFolderCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/user/file/delete",
					Handler: private_repo.UserFileDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/public/file/name/update",
					Handler: public_repo.PublicFileNameUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/public/folder/create",
					Handler: public_repo.PublicFolderCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/public/file/delete",
					Handler: public_repo.PublicFileDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/user/file/move",
					Handler: private_repo.UserFileMoveHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/download",
					Handler: fileud.FileDownloadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/share/basic/create",
					Handler: share.ShareBasicCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/share/basic/save",
					Handler: share.ShareBasicSaveHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/share/list",
					Handler: share.UserShareListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/refresh/authorization",
					Handler: users.RefreshAuthorizationHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/detail",
					Handler: users.UserDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/upload/prepare",
					Handler: fileud.FileUploadPrepareHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/upload/chunk",
					Handler: fileud.FileUploadChunkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/upload/chunk/complete",
					Handler: fileud.FileUploadChunkCompleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/posts/create",
					Handler: posts.PostsCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/posts/update",
					Handler: posts.PostsUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/posts/delete",
					Handler: posts.PostsDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/posts/comment/create",
					Handler: posts.PostsCommentCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/posts/comment/delete",
					Handler: posts.PostsCommentDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/posts/feedback/create",
					Handler: posts.PostsFeedbackCreateHandler(serverCtx),
				},
			}...,
		),
	)
}
