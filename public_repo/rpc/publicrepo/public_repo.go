// Code generated by goctl. DO NOT EDIT!
// Source: public_repo.proto

package publicrepo

import (
	"context"

	"gcloud/public_repo/rpc/public_repo"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	PublicFile                  = public_repo.PublicFile
	PublicFileListReply         = public_repo.PublicFileListReply
	PublicFileListRequest       = public_repo.PublicFileListRequest
	PublicRepositorySaveReply   = public_repo.PublicRepositorySaveReply
	PublicRepositorySaveRequest = public_repo.PublicRepositorySaveRequest
	UserFileDeleteReply         = public_repo.UserFileDeleteReply
	UserFileDeleteRequest       = public_repo.UserFileDeleteRequest
	UserFileNameUpdateReply     = public_repo.UserFileNameUpdateReply
	UserFileNameUpdateRequest   = public_repo.UserFileNameUpdateRequest
	UserFolderCreateReply       = public_repo.UserFolderCreateReply
	UserFolderCreateRequest     = public_repo.UserFolderCreateRequest

	PublicRepo interface {
		PublicFileDelete(ctx context.Context, in *UserFileDeleteRequest, opts ...grpc.CallOption) (*UserFileDeleteReply, error)
		PublicFileList(ctx context.Context, in *PublicFileListRequest, opts ...grpc.CallOption) (*PublicFileListReply, error)
		PublicFileNameUpdate(ctx context.Context, in *UserFileNameUpdateRequest, opts ...grpc.CallOption) (*UserFileNameUpdateReply, error)
		PublicFolderCreate(ctx context.Context, in *UserFolderCreateRequest, opts ...grpc.CallOption) (*UserFolderCreateReply, error)
		PublicFileSave(ctx context.Context, in *PublicRepositorySaveRequest, opts ...grpc.CallOption) (*PublicRepositorySaveReply, error)
	}

	defaultPublicRepo struct {
		cli zrpc.Client
	}
)

func NewPublicRepo(cli zrpc.Client) PublicRepo {
	return &defaultPublicRepo{
		cli: cli,
	}
}

func (m *defaultPublicRepo) PublicFileDelete(ctx context.Context, in *UserFileDeleteRequest, opts ...grpc.CallOption) (*UserFileDeleteReply, error) {
	client := public_repo.NewPublicRepoClient(m.cli.Conn())
	return client.PublicFileDelete(ctx, in, opts...)
}

func (m *defaultPublicRepo) PublicFileList(ctx context.Context, in *PublicFileListRequest, opts ...grpc.CallOption) (*PublicFileListReply, error) {
	client := public_repo.NewPublicRepoClient(m.cli.Conn())
	return client.PublicFileList(ctx, in, opts...)
}

func (m *defaultPublicRepo) PublicFileNameUpdate(ctx context.Context, in *UserFileNameUpdateRequest, opts ...grpc.CallOption) (*UserFileNameUpdateReply, error) {
	client := public_repo.NewPublicRepoClient(m.cli.Conn())
	return client.PublicFileNameUpdate(ctx, in, opts...)
}

func (m *defaultPublicRepo) PublicFolderCreate(ctx context.Context, in *UserFolderCreateRequest, opts ...grpc.CallOption) (*UserFolderCreateReply, error) {
	client := public_repo.NewPublicRepoClient(m.cli.Conn())
	return client.PublicFolderCreate(ctx, in, opts...)
}

func (m *defaultPublicRepo) PublicFileSave(ctx context.Context, in *PublicRepositorySaveRequest, opts ...grpc.CallOption) (*PublicRepositorySaveReply, error) {
	client := public_repo.NewPublicRepoClient(m.cli.Conn())
	return client.PublicFileSave(ctx, in, opts...)
}
