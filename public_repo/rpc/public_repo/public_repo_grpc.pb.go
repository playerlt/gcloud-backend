// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: public_repo.proto

package public_repo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicRepoClient is the client API for PublicRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicRepoClient interface {
	PublicFileDelete(ctx context.Context, in *UserFileDeleteRequest, opts ...grpc.CallOption) (*UserFileDeleteReply, error)
	PublicFileList(ctx context.Context, in *PublicFileListRequest, opts ...grpc.CallOption) (*PublicFileListReply, error)
	PublicFileNameUpdate(ctx context.Context, in *UserFileNameUpdateRequest, opts ...grpc.CallOption) (*UserFileNameUpdateReply, error)
	PublicFolderCreate(ctx context.Context, in *UserFolderCreateRequest, opts ...grpc.CallOption) (*UserFolderCreateReply, error)
	PublicFileSave(ctx context.Context, in *PublicRepositorySaveRequest, opts ...grpc.CallOption) (*PublicRepositorySaveReply, error)
}

type publicRepoClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicRepoClient(cc grpc.ClientConnInterface) PublicRepoClient {
	return &publicRepoClient{cc}
}

func (c *publicRepoClient) PublicFileDelete(ctx context.Context, in *UserFileDeleteRequest, opts ...grpc.CallOption) (*UserFileDeleteReply, error) {
	out := new(UserFileDeleteReply)
	err := c.cc.Invoke(ctx, "/public_repo.PublicRepo/PublicFileDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicRepoClient) PublicFileList(ctx context.Context, in *PublicFileListRequest, opts ...grpc.CallOption) (*PublicFileListReply, error) {
	out := new(PublicFileListReply)
	err := c.cc.Invoke(ctx, "/public_repo.PublicRepo/PublicFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicRepoClient) PublicFileNameUpdate(ctx context.Context, in *UserFileNameUpdateRequest, opts ...grpc.CallOption) (*UserFileNameUpdateReply, error) {
	out := new(UserFileNameUpdateReply)
	err := c.cc.Invoke(ctx, "/public_repo.PublicRepo/PublicFileNameUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicRepoClient) PublicFolderCreate(ctx context.Context, in *UserFolderCreateRequest, opts ...grpc.CallOption) (*UserFolderCreateReply, error) {
	out := new(UserFolderCreateReply)
	err := c.cc.Invoke(ctx, "/public_repo.PublicRepo/PublicFolderCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicRepoClient) PublicFileSave(ctx context.Context, in *PublicRepositorySaveRequest, opts ...grpc.CallOption) (*PublicRepositorySaveReply, error) {
	out := new(PublicRepositorySaveReply)
	err := c.cc.Invoke(ctx, "/public_repo.PublicRepo/PublicFileSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicRepoServer is the server API for PublicRepo service.
// All implementations must embed UnimplementedPublicRepoServer
// for forward compatibility
type PublicRepoServer interface {
	PublicFileDelete(context.Context, *UserFileDeleteRequest) (*UserFileDeleteReply, error)
	PublicFileList(context.Context, *PublicFileListRequest) (*PublicFileListReply, error)
	PublicFileNameUpdate(context.Context, *UserFileNameUpdateRequest) (*UserFileNameUpdateReply, error)
	PublicFolderCreate(context.Context, *UserFolderCreateRequest) (*UserFolderCreateReply, error)
	PublicFileSave(context.Context, *PublicRepositorySaveRequest) (*PublicRepositorySaveReply, error)
	mustEmbedUnimplementedPublicRepoServer()
}

// UnimplementedPublicRepoServer must be embedded to have forward compatible implementations.
type UnimplementedPublicRepoServer struct {
}

func (UnimplementedPublicRepoServer) PublicFileDelete(context.Context, *UserFileDeleteRequest) (*UserFileDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicFileDelete not implemented")
}
func (UnimplementedPublicRepoServer) PublicFileList(context.Context, *PublicFileListRequest) (*PublicFileListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicFileList not implemented")
}
func (UnimplementedPublicRepoServer) PublicFileNameUpdate(context.Context, *UserFileNameUpdateRequest) (*UserFileNameUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicFileNameUpdate not implemented")
}
func (UnimplementedPublicRepoServer) PublicFolderCreate(context.Context, *UserFolderCreateRequest) (*UserFolderCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicFolderCreate not implemented")
}
func (UnimplementedPublicRepoServer) PublicFileSave(context.Context, *PublicRepositorySaveRequest) (*PublicRepositorySaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicFileSave not implemented")
}
func (UnimplementedPublicRepoServer) mustEmbedUnimplementedPublicRepoServer() {}

// UnsafePublicRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicRepoServer will
// result in compilation errors.
type UnsafePublicRepoServer interface {
	mustEmbedUnimplementedPublicRepoServer()
}

func RegisterPublicRepoServer(s grpc.ServiceRegistrar, srv PublicRepoServer) {
	s.RegisterService(&PublicRepo_ServiceDesc, srv)
}

func _PublicRepo_PublicFileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRepoServer).PublicFileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public_repo.PublicRepo/PublicFileDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRepoServer).PublicFileDelete(ctx, req.(*UserFileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicRepo_PublicFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRepoServer).PublicFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public_repo.PublicRepo/PublicFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRepoServer).PublicFileList(ctx, req.(*PublicFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicRepo_PublicFileNameUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileNameUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRepoServer).PublicFileNameUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public_repo.PublicRepo/PublicFileNameUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRepoServer).PublicFileNameUpdate(ctx, req.(*UserFileNameUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicRepo_PublicFolderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFolderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRepoServer).PublicFolderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public_repo.PublicRepo/PublicFolderCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRepoServer).PublicFolderCreate(ctx, req.(*UserFolderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicRepo_PublicFileSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicRepositorySaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRepoServer).PublicFileSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public_repo.PublicRepo/PublicFileSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRepoServer).PublicFileSave(ctx, req.(*PublicRepositorySaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicRepo_ServiceDesc is the grpc.ServiceDesc for PublicRepo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicRepo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public_repo.PublicRepo",
	HandlerType: (*PublicRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublicFileDelete",
			Handler:    _PublicRepo_PublicFileDelete_Handler,
		},
		{
			MethodName: "PublicFileList",
			Handler:    _PublicRepo_PublicFileList_Handler,
		},
		{
			MethodName: "PublicFileNameUpdate",
			Handler:    _PublicRepo_PublicFileNameUpdate_Handler,
		},
		{
			MethodName: "PublicFolderCreate",
			Handler:    _PublicRepo_PublicFolderCreate_Handler,
		},
		{
			MethodName: "PublicFileSave",
			Handler:    _PublicRepo_PublicFileSave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public_repo.proto",
}
